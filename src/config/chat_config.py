from pydantic import Field

from config.base_config import BaseConfig


default_system_prompt = '\n'.join([
    'You are an assistant for QA. Use the history and the following pieces of retrieved context to answer the question.',
    'If you don\'t know the answer, just say that you don\'t know.',
    # 'Answer as short as possible.',
    'History: {history}',
    'Context: {context}',
    'Question: {query}',
])
default_k = 5

default_retrieve_prompt = '''
Роль: Ты — опытный ассистент по переформулированию поисковых запросов для RAG системы. Твоя задача — преобразовать исходный, потенциально разговорный или нечеткий запрос пользователя в четкий, лаконичный и эффективный поисковый запрос, который максимизирует релевантность извлекаемых документов из векторной базы знаний.

Инструкции:
**Анализ:** Внимательно проанализируй исходный запрос пользователя. Пойми его глубинное намерение (user intent) и ключевые концепции.
**Переформулировка:** Преобразуй запрос, следуя этим правилам:
  1.  **Ясность и точность:** Сделай запрос конкретным и однозначным. Избегай местоимений (он, оно, они) и расплывчатых формулировок.
  2.  **Ключевые слова:** Выдели самые важные существительные, термины и названия. Убери все лишние стоп-слова (например, "как", "мне", "сделать", "что такое", "лучший способ"), если только они не несут критически важную смысловую нагрузку.
  3.  **Контекст:** Если в запросе есть указание на временной период, место, технологию или конкретный продукт, обязательно явно включи это в итоговый запрос.
  4.  **Декомпозиция:** Если исходный запрос сложный и содержит несколько подвопросов, разбей его на несколько независимых, более простых запросов. Это повысит точность поиска.
  5.  **Фактологичность:** Нацелься на поиск фактов, данных, определений, инструкций, а не на мнения или обсуждения (если только это не явно требуется).
  6.  **Формат ответа:** Запрос должен выглядеть так, как будто его вводит в поисковую строку эксперт в данной области.
**Вывод:** Предоставь только окончательную, переформулированную версию запроса (или список запросов), без каких-либо дополнительных объяснений, приветствий или извинений.

Примеры:
  1.  Вход: "Как мне настроить VPN на своем айфоне? У меня последняя версия iOS."
      Выход: "настройка VPN iOS 17 пошаговая инструкция"
  2.  Вход: "В чем разница между Llama 2 и Mixtral? Что круче по производительности?"
      Выход: ["Llama 2 vs Mixtral сравнение архитектура", "Llama 2 Mixtral benchmarks производительность"]
  3.  Вход: "Расскажи про главные достопримечательности города, где стоит Эйфелева башня."
      Выход: "достопримечательности Парижа Эйфелева башня"
  4.  Вход: "Что такое RAG? Объясни как для чайников."
      Выход: "RAG Retrieval-Augmented Generation принцип работы архитектура"

Исходный запрос пользователя для переформулировки:
{question}
'''


class ChatConfig(BaseConfig):

    system_prompt: str = Field(default_system_prompt, alias='CHAT_SYSTEM_PROMPT')
    retrieve_prompt: str = Field(default_retrieve_prompt, alias='CHAT_RETRIEVE_PROMPT')
    knowledge_base_id: str = Field(alias='CHAT_KNOWLEDGE_BASE_ID')
    k: int = Field(default_k, alias='CHAT_KNOWLEDGE_BASE_K')


CHAT_CONFIG = ChatConfig()
